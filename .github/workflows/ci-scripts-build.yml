# .github/workflows/ci-scripts-build.yml for use with EPICS Base ci-scripts
# (see: https://github.com/epics-base/ci-scripts)

# This is YAML - indentation levels are crucial

# Workflow name, shared by all branches

name: pvData

# Trigger on pushes and PRs to any branch
on:
  push:
    paths-ignore:
      - .appveyor.yml
  pull_request:

env:
    SETUP_PATH: .ci-local:.ci
    EPICS_TEST_IMPRECISE_TIMING: YES
    EPICS_TEST_TIMEOUT: 300 # 5 min (RTEMS epicsMessageQueue is slowest)

jobs:
  native:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    # Set environment variables from matrix parameters
    env:
      BASE: ${{ matrix.base }}
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
      CI_CROSS_TARGETS: ${{ matrix.cross }}
      EXTRA: ${{ matrix.extra }}
      TEST: ${{ matrix.test }}
    strategy:
      fail-fast: false
      matrix:
        # Job names also name artifacts, character limitations apply
        include:
          - name: "3.15 Ub-20 gcc + MinGW"
            base: "3.15"
            os: ubuntu-20.04
            cmp: gcc
            cross: "windows-x64-mingw"
            configuration: default

          - name: "7.0 Ub clang"
            base: "7.0"
            os: ubuntu-latest
            cmp: clang
            configuration: default

          - name: "7.0 Ub clang C++11"
            base: "7.0"
            os: ubuntu-latest
            cmp: clang
            extra: "CMD_CXXFLAGS=-std=c++11"
            configuration: default

          - name: "7.0 Ub gcc + MinGW"
            base: "7.0"
            os: ubuntu-latest
            cmp: gcc
            cross: "windows-x64-mingw"
            configuration: default

          - name: "7.0 Ub gcc + MinGW, static"
            base: "7.0"
            os: ubuntu-latest
            cmp: gcc
            cross: "windows-x64-mingw"
            configuration: static

          - name: "7.0 Ub gcc C++11, static"
            base: "7.0"
            os: ubuntu-latest
            cmp: gcc
            extra: "CMD_CXXFLAGS=-std=c++11"
            configuration: static

          - name: "7.0 Ub-20 gcc + RT-5.1 pc686"
            base: "7.0"
            os: ubuntu-20.04
            cmp: gcc
            cross: "RTEMS-pc686-qemu@5"
            configuration: default

          - name: "7.0 Ub-20 gcc + RT-5.1 beatnik,zynq_a9,uC5282"
            base: "7.0"
            os: ubuntu-20.04
            cmp: gcc
            cross: "RTEMS-beatnik@5:RTEMS-xilinx_zynq_a9_qemu@5:RTEMS-uC5282@5"
            configuration: default
            test: NO

          - name: "7.0 Ub-20 gcc + RT-4.10"
            base: "7.0"
            os: ubuntu-20.04
            cmp: gcc
            cross: "RTEMS-pc386-qemu@4.10"
            configuration: default

          - name: "7.0 Ub-20 gcc + RT-4.9"
            base: "7.0"
            os: ubuntu-20.04
            cmp: gcc
            cross: "RTEMS-pc386-qemu@4.9"
            configuration: default

          - name: "7.0 MacOS clang"
            base: "7.0"
            os: macos-latest
            cmp: clang
            configuration: default

          - name: "7.0 Win2019 MSC-19"
            base: "7.0"
            os: windows-2019
            cmp: vs2019
            configuration: default

          - name: "7.0 Win2019 MSC-19, static"
            base: "7.0"
            os: windows-2019
            cmp: vs2019
            configuration: static

          - name: "7.0 Win2019 MSC-19, debug"
            base: "7.0"
            os: windows-2019
            cmp: vs2019
            configuration: debug

          - name: "7.0 Win2019 MinGW"
            base: "7.0"
            os: windows-2019
            cmp: gcc
            configuration: default

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Automatic core dumper analysis
      uses: mdavidsaver/ci-core-dumper@master
    - name: "apt-get install"
      run: |
        sudo apt-get update
        sudo apt-get -y install qemu-system-x86 g++-mingw-w64-x86-64 gdb
      if: runner.os == 'Linux'
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py -T 60M test
    - name: Upload tapfiles Artifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tapfiles ${{ matrix.name }}
        path: '**/O.*/*.tap'
        if-no-files-found: ignore
    - name: Collect and show test results
      if: ${{ always() }}
      run: python .ci/cue.py -T 5M test-results

  docker:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    # Set environment variables from matrix parameters
    env:
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
      BASE: ${{ matrix.base }}
      EXTRA: ${{ matrix.extra }}
      TEST: ${{ matrix.test }}
    strategy:
      fail-fast: false
      matrix:
        # Job names also name artifacts, character limitations apply
        include:
          #- name: "7.0 CentOS-7 gcc"
          #  image: centos:7
          #  cmp: gcc
          #  configuration: default
          #  base: "7.0"

          - name: "7.0 Fedora-33 gcc"
            base: "7.0"
            image: fedora:33
            cmp: gcc
            configuration: default

          - name: "7.0 Fedora-latest gcc"
            base: "7.0"
            image: fedora:latest
            cmp: gcc
            configuration: default

    steps:
    - name: "Build newer Git"
      # actions/checkout@v2 wants git >=2.18
      # centos:7 has 1.8
      if: matrix.image=='centos:7'
      run: |
        yum -y install curl make gcc curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-ExtUtils-MakeMaker
        curl https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.29.0.tar.gz | tar -xz
        cd git-*
        make -j2 prefix=/usr/local all
        make prefix=/usr/local install
        cd ..
        rm -rf git-*
        type -a git
        git --version
    - name: "Redhat setup"
      run: |
        dnfyum() {
            dnf -y "$@" || yum -y "$@"
            return $?
        }
        dnfyum install python3 gdb make perl gcc-c++ glibc-devel readline-devel ncurses-devel perl-devel perl-Test-Simple
        git --version || dnfyum install git
        # rather than just bite the bullet and link python3 -> python,
        # people would rather just break all existing scripts...
        [ -e /usr/bin/python ] || ln -sf python3 /usr/bin/python
        python --version
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Automatic core dumper analysis
      uses: mdavidsaver/ci-core-dumper@master
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py -T 20M test
    - name: Upload tapfiles Artifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tapfiles ${{ matrix.name }}
        path: '**/O.*/*.tap'
        if-no-files-found: ignore
    - name: Collect and show test results
      if: ${{ always() }}
      run: python .ci/cue.py -T 5M test-results
